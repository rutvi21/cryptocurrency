/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  BasicDutchAuction,
  BasicDutchAuctionInterface,
} from "../BasicDutchAuction";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_reservePrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_numBlocksAuctionOpen",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_offerPriceDecrement",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bid",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numBlocksAuctionOpen",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "offerPriceDecrement",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reservePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101206040523480156200001257600080fd5b5060405162000f3e38038062000f3e8339818101604052810190620000389190620001c4565b6200005467d52741b9977b9b1860c01b6200018160201b60201c565b62000070673a8401e29900855360c01b6200018160201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000c067eb3dcd420192416860c01b6200018160201b60201c565b8260a08181525050620000e467fda20f56640a72a760c01b6200018160201b60201c565b8160c081815250506200010867f127a4b236d2d18660c01b6200018160201b60201c565b8060e081815250506200012c67c6075cdcf742fe6360c01b6200018160201b60201c565b4361010081815250506200015167eff30118448c747360c01b6200018160201b60201c565b60e05160c0516200016391906200024f565b60a051620001729190620002b0565b6000819055505050506200030d565b50565b600080fd5b6000819050919050565b6200019e8162000189565b8114620001aa57600080fd5b50565b600081519050620001be8162000193565b92915050565b600080600060608486031215620001e057620001df62000184565b5b6000620001f086828701620001ad565b93505060206200020386828701620001ad565b92505060406200021686828701620001ad565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200025c8262000189565b9150620002698362000189565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620002a557620002a462000220565b5b828202905092915050565b6000620002bd8262000189565b9150620002ca8362000189565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000302576200030162000220565b5b828201905092915050565b60805160a05160c05160e05161010051610bbb62000383600039600081816103240152818161062c0152610722015260008181610674015261084001526000818161038e01528181610608015261077801526000818161069801526107db01526000818161054901526106500152610bbb6000f3fe6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b1461012a578063d3642a8814610155578063db2e1eed14610180578063dfbf53ae146101ab578063eb91d37e146101d657610086565b80631998aeef1461008b5780631d0806ae146100a95780633103ea62146100d457806348cd4cb1146100ff575b600080fd5b610093610201565b6040516100a091906108c2565b60405180910390f35b3480156100b557600080fd5b506100be610600565b6040516100cb91906108f6565b60405180910390f35b3480156100e057600080fd5b506100e9610606565b6040516100f691906108f6565b60405180910390f35b34801561010b57600080fd5b5061011461062a565b60405161012191906108f6565b60405180910390f35b34801561013657600080fd5b5061013f61064e565b60405161014c9190610932565b60405180910390f35b34801561016157600080fd5b5061016a610672565b60405161017791906108f6565b60405180910390f35b34801561018c57600080fd5b50610195610696565b6040516101a291906108f6565b60405180910390f35b3480156101b757600080fd5b506101c06106ba565b6040516101cd91906108c2565b60405180910390f35b3480156101e257600080fd5b506101eb6106e0565b6040516101f891906108f6565b60405180910390f35b600061021767869a7314bc8ae3e760c01b61087e565b61022b67fd533e1a8331552460c01b61087e565b61023f67fd219266f1be1a6860c01b61087e565b610253673f4bb11034f2dd5060c01b61087e565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db906109aa565b60405180910390fd5b6102f867c43948dc9ffe2f2060c01b61087e565b61030c67fb85860faa817e2460c01b61087e565b6103206727d20447caa7630b60c01b61087e565b60007f00000000000000000000000000000000000000000000000000000000000000004361034e91906109f9565b905061036467b1d9dad44de35f5260c01b61087e565b6103786796ff37c67acb58db60c01b61087e565b61038c67cda93de58039199d60c01b61087e565b7f00000000000000000000000000000000000000000000000000000000000000008111156103ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e690610a79565b60405180910390fd5b610403674ff47eb18a1faf7460c01b61087e565b6104176788c07f4c32e6c76c60c01b61087e565b61042b67295d1756afe9f9de60c01b61087e565b60006104356106e0565b905061044b6771206e49263854a660c01b61087e565b61045f671d0b90a4ff2b5e3f60c01b61087e565b610473674f339c8aee8c80d960c01b61087e565b803410156104b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ad90610b0b565b60405180910390fd5b6104ca67f2cdbe5e79be328960c01b61087e565b6104de67dc6dbf26d094558460c01b61087e565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506105336714225847136eb46360c01b61087e565b610547674d2cd73c729b41b460c01b61087e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156105ad573d6000803e3d6000fd5b506105c26737aa58f4c6a5d23e60c01b61087e565b6105d667f3ebbc2f628026d460c01b61087e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250505090565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006106f667a4b3f6c1027db2e060c01b61087e565b61070a678ee806b3619cc5ce60c01b61087e565b61071e670ad3ce162deda19a60c01b61087e565b60007f00000000000000000000000000000000000000000000000000000000000000004361074c91906109f9565b905061076267c1c66e956ff2927a60c01b61087e565b610776679cc48b2fe21d12fd60c01b61087e565b7f00000000000000000000000000000000000000000000000000000000000000008110610802576107b167b170cde39644fd5760c01b61087e565b6107c567a41ad536927559d760c01b61087e565b6107d967a63c60158f8f46a760c01b61087e565b7f000000000000000000000000000000000000000000000000000000000000000091505061087b565b61081667a01f405277ab320b60c01b61087e565b61082a6730c20b9ff7bb448e60c01b61087e565b61083e677ec5df5bf4fa980360c01b61087e565b7f00000000000000000000000000000000000000000000000000000000000000008161086a9190610b2b565b60005461087791906109f9565b9150505b90565b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108ac82610881565b9050919050565b6108bc816108a1565b82525050565b60006020820190506108d760008301846108b3565b92915050565b6000819050919050565b6108f0816108dd565b82525050565b600060208201905061090b60008301846108e7565b92915050565b600061091c82610881565b9050919050565b61092c81610911565b82525050565b60006020820190506109476000830184610923565b92915050565b600082825260208201905092915050565b7f41756374696f6e2068617320616c726561647920636f6e636c75646564000000600082015250565b6000610994601d8361094d565b915061099f8261095e565b602082019050919050565b600060208201905081810360008301526109c381610987565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a04826108dd565b9150610a0f836108dd565b925082821015610a2257610a216109ca565b5b828203905092915050565b7f41756374696f6e20657870697265640000000000000000000000000000000000600082015250565b6000610a63600f8361094d565b9150610a6e82610a2d565b602082019050919050565b60006020820190508181036000830152610a9281610a56565b9050919050565b7f546865207765692076616c75652073656e74206973206e6f742061636365707460008201527f61626c6500000000000000000000000000000000000000000000000000000000602082015250565b6000610af560248361094d565b9150610b0082610a99565b604082019050919050565b60006020820190508181036000830152610b2481610ae8565b9050919050565b6000610b36826108dd565b9150610b41836108dd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b7a57610b796109ca565b5b82820290509291505056fea2646970667358221220fa7126d11e6da0ececf5d5c9b740e3fcd6e6d0ce973440e04ce2a267635e0c3a64736f6c63430008090033";

type BasicDutchAuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BasicDutchAuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BasicDutchAuction__factory extends ContractFactory {
  constructor(...args: BasicDutchAuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _reservePrice: PromiseOrValue<BigNumberish>,
    _numBlocksAuctionOpen: PromiseOrValue<BigNumberish>,
    _offerPriceDecrement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BasicDutchAuction> {
    return super.deploy(
      _reservePrice,
      _numBlocksAuctionOpen,
      _offerPriceDecrement,
      overrides || {}
    ) as Promise<BasicDutchAuction>;
  }
  override getDeployTransaction(
    _reservePrice: PromiseOrValue<BigNumberish>,
    _numBlocksAuctionOpen: PromiseOrValue<BigNumberish>,
    _offerPriceDecrement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _reservePrice,
      _numBlocksAuctionOpen,
      _offerPriceDecrement,
      overrides || {}
    );
  }
  override attach(address: string): BasicDutchAuction {
    return super.attach(address) as BasicDutchAuction;
  }
  override connect(signer: Signer): BasicDutchAuction__factory {
    return super.connect(signer) as BasicDutchAuction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasicDutchAuctionInterface {
    return new utils.Interface(_abi) as BasicDutchAuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BasicDutchAuction {
    return new Contract(address, _abi, signerOrProvider) as BasicDutchAuction;
  }
}
